/*
 * appuser.js
 * Author: Sukhbir Singh
 * Description: This contains the postgresql table definition for Todo Item table
 */



// The todo item table has the following defined columns
// id: int primary key that is autogenerated
// appuserid: foreign key to the appuser.id, todo items have a many-to-one relationship to app users
// title: varchar(500)
// description: varchar (2000)
// datecreated: timestamp, auto generated to be the current timestamp in GMT
// complete: boolean value, true/false


const lodash = require('lodash');

const TodoItem = {};

// when TodoItem is imported, set pool to a pg pool
TodoItem.pool = null;


TodoItem.TODOITEM_TITLE_MIN_LENGTH = 1;
TodoItem.TODOITEM_TITLE_MAX_LENGTH = 500;


TodoItem.TODOITEM_DESCRIPTION_MIN_LENGTH = 0;
TodoItem.TODOITEM_DESCRIPTION_MAX_LENGTH = 2000;

TodoItem.TODOITEM_TABLE_NAME = 'todoitem';

TodoItem.TODOITEM_APPUSER_REFERENCE_TABLE_NAME = 'appuser';
TodoItem.TODOITEM_APPUSER_REFERENCE_COLUMN_NAME = 'id';

const EXISTS_TABLE = function () {
	return `SELECT tablename FROM pg_tables WHERE tablename = '${TodoItem.TODOITEM_TABLE_NAME}';`;
};

const CREATE_TABLE_TODOITEM = function () {
	return `CREATE TABLE ${TodoItem.TODOITEM_TABLE_NAME} (
		id SERIAL PRIMARY KEY,
		
		appuserid int references ${TodoItem.TODOITEM_APPUSER_REFERENCE_TABLE_NAME}(${TodoItem.TODOITEM_APPUSER_REFERENCE_COLUMN_NAME}) ON DELETE CASCADE,
		
		title varchar(${TodoItem.TODOITEM_TITLE_MAX_LENGTH}) 
		CHECK(LENGTH(title) >= ${TodoItem.TODOITEM_TITLE_MIN_LENGTH} AND LENGTH(title) <= ${TodoItem.TODOITEM_TITLE_MAX_LENGTH}),

		description varchar(${TodoItem.TODOITEM_DESCRIPTION_MAX_LENGTH}) 
		CHECK(LENGTH(title) >= ${TodoItem.TODOITEM_DESCRIPTION_MIN_LENGTH} AND LENGTH(title) <= ${TodoItem.TODOITEM_DESCRIPTION_MAX_LENGTH}),

		complete boolean DEFAULT false,

		datecreated timestamp DEFAULT current_timestamp
	);`;
};

const DROP_TABLE_TODOITEM = function () {
	return `DROP TABLE ${TodoItem.TODOITEM_TABLE_NAME};`;
};

// Add TodoItem sql
const INSERT_INTO_TODOITEM = function () {
	return `INSERT INTO ${TodoItem.TODOITEM_TABLE_NAME} (appuserid, title, description, complete) VALUES ($1, $2, $3, $4);`;
};

// Update TodoItem sql
const UPDATE_TODOITEM_WHERE_ID_EQUALS = function () {
	return `UPDATE ${TodoItem.TODOITEM_TABLE_NAME} SET title = $1, description = $2, complete = $3 WHERE id = $4;`;
}

const SELECT_ALL_FROM_TODOITEM = function () {
	return `SELECT * FROM ${TodoItem.TODOITEM_TABLE_NAME};`;
};

// Get all TodoItem for a user
const SELECT_ALL_FROM_TODOITEM_WHERE_APPUSER_ID_EQUALS = function () {
	return `SELECT id,  FROM ${TodoItem.TODOITEM_TABLE_NAME} WHERE appuserid = $1;`;
};

// Get all TodoItems for a user, exclude the reference column (appuserid)
const SELECT_All_EXCEPT_APPUSER_ID_FROM_TODOITEM_WHERE_APPUSER_ID_EQUALS = function () {
	return `SELECT id, title, description, complete, datecreated  FROM ${TodoItem.TODOITEM_TABLE_NAME} WHERE appuserid = $1;`;
};

const SELECT_COUNT_FROM_TODOITEM = function () {
	return `SELECT count(*) FROM ${TodoItem.TODOITEM_TABLE_NAME};`;
};

const SELECT_ALL_FROM_TODOITEM_WHERE_ID_EQUALS = function () {
	return `SELECT * FROM ${TodoItem.TODOITEM_TABLE_NAME} WHERE id = $1;`;
};



function getEmptyDBResponse() {
	return {
		rows: [],
		fields: [],
		command: '',
		rowCount: 0
	};
}

TodoItem.setTableName = function (name) {
	TodoItem.TODOITEM_TABLE_NAME = name;
};

TodoItem.setReferenceTableName = function (name) {
	TodoItem.TODOITEM_APPUSER_REFERENCE_TABLE_NAME = name;
};

TodoItem.setTitleLengthBounds = function (min, max) {
	// Can make testing easier by using smaller constrainer values
	TodoItem.TODOITEM_TITLE_MIN_LENGTH = min;
	TodoItem.TODOITEM_TITLE_MAX_LENGTH = max;
}

TodoItem.setDescriptionLengthBounds = function (min, max) {
	// Can make testing easier by using smaller constrainer values
	TodoItem.TODOITEM_DESCRIPTION_MIN_LENGTH = min;
	TodoItem.TODOITEM_DESCRIPTION_MAX_LENGTH = max;
}


TodoItem.existsTable = function (cb) {
	// This function is for testing purposes only.
	if (TodoItem.pool == null) {
		cb(new Error('pg pool must not be null'), getEmptyDBResponse());
		return;
	}
	TodoItem.pool.query(EXISTS_TABLE(), (err, res) => {
		let exists = res.rowCount > 0;
		cb(err, exists, res);
	});
}

TodoItem.count = function (cb) {
	if (TodoItem.pool == null) {
		cb(new Error('pg pool must not be null'), getEmptyDBResponse());
		return;
	}
	TodoItem.pool.query(SELECT_COUNT_FROM_TODOITEM(), (err, res) => {
		if (err) {
			cb(err, -1, null);
		}
		else {
			let count = res.rows[0].count;
			cb(err, count, res);
		}
	});
};

TodoItem.createTable = function (cb) {
	if (TodoItem.pool == null) {
		cb(new Error('pg pool must not be null'), getEmptyDBResponse());
		return;
	}
	TodoItem.pool.query(CREATE_TABLE_TODOITEM(), (err, res) => {
		cb(err, res);
	});
};

TodoItem.dropTable = function (cb) {
	if (TodoItem.pool == null) {
		cb(new Error('pg pool must not be null'), getEmptyDBResponse());
		return;
	}
	TodoItem.pool.query(DROP_TABLE_TODOITEM(), (err, res) => {
		cb(err, res);
	});
};

TodoItem.all = function (cb) {
	if (TodoItem.pool == null) {
		cb(new Error('pg pool must not be null'), getEmptyDBResponse());
		return;
	}
	TodoItem.pool.query(SELECT_ALL_FROM_TODOITEM(), (err, res) => {
		cb(err, res);
	});
};


TodoItem.allForUser = function (appuserid, cb) {
	if (TodoItem.pool == null) {
		cb(new Error('pg pool must not be null'), getEmptyDBResponse());
		return;
	}
	TodoItem.pool.query(SELECT_All_EXCEPT_APPUSER_ID_FROM_TODOITEM_WHERE_APPUSER_ID_EQUALS(), [appuserid], (err, res) => {
		cb(err, res);
	});
};

TodoItem.getById = function (id, cb) {
	if (TodoItem.pool == null) {
		cb(new Error('pg pool must not be null'), getEmptyDBResponse());
		return;
	}
	if (!lodash.isInteger(id) || id < 1) {
		cb(new Error('id must be an integer greater than 0'), getEmptyDBResponse());
		return;
	}
	TodoItem.pool.query(SELECT_ALL_FROM_TODOITEM_WHERE_ID_EQUALS(), [id], (err, res) => {
		cb(err, res);
	});
};



TodoItem.add = function (appuserid, title, description, complete, cb) {
	if (TodoItem.pool == null) {
		cb(new Error('pg pool must not be null'), getEmptyDBResponse());
		return;
	}

	if (!Number.isInteger(appuserid) || appuserid < 1) {
		cb(new Error('appuserid must be an integer greater than 0'), getEmptyDBResponse());
		return;
	}

	if (typeof (title) != 'string'
		|| title.length < TodoItem.TODOITEM_TITLE_MIN_LENGTH
		|| title.length > TodoItem.TODOITEM_TITLE_MAX_LENGTH
	) {
		cb(new Error(`title must be a non-empty string with a length of at least ${TodoItem.TODOITEM_TITLE_MIN_LENGTH} and no more than ${TodoItem.TODOITEM_TITLE_MAX_LENGTH}`), getEmptyDBResponse());
		return;
	}

	if (typeof (description) != 'string'
		|| description.length < TodoItem.TODOITEM_DESCRIPTION_MIN_LENGTH
		|| description.length > TodoItem.TODOITEM_DESCRIPTION_MAX_LENGTH
	) {
		cb(new Error(`description must be string with a length of at least ${TodoItem.TODOITEM_DESCRIPTION_MIN_LENGTH} and no more than ${TodoItem.TODOITEM_DESCRIPTION_MAX_LENGTH}`), getEmptyDBResponse());
		return;
	}

	if (typeof (complete) != 'boolean') {
		cb(new Error(`complete must be a boolean (true/false)`), getEmptyDBResponse());
		return;
	}

	TodoItem.pool.query(INSERT_INTO_TODOITEM(), [appuserid, title, description, complete], (err, res) => {
		cb(err, res);
	});

};

TodoItem.update = function (id, title, description, complete, cb) {
	if (TodoItem.pool == null) {
		cb(new Error('pg pool must not be null'), getEmptyDBResponse());
		return;
	}

	if (!Number.isInteger(id) || id < 1) {
		cb(new Error('id must be an integer greater than 0'), getEmptyDBResponse());
		return;
	}

	if (typeof (title) != 'string'
		|| title.length < TodoItem.TODOITEM_TITLE_MIN_LENGTH
		|| title.length > TodoItem.TODOITEM_TITLE_MAX_LENGTH
	) {
		cb(new Error(`title must be a non-empty string with a length of at least ${TodoItem.TODOITEM_TITLE_MIN_LENGTH} and no more than ${TodoItem.TODOITEM_TITLE_MAX_LENGTH}`), getEmptyDBResponse());
		return;
	}

	if (typeof (description) != 'string'
		|| description.length < TodoItem.TODOITEM_DESCRIPTION_MIN_LENGTH
		|| description.length > TodoItem.TODOITEM_DESCRIPTION_MAX_LENGTH
	) {
		cb(new Error(`description must be string with a length of at least ${TodoItem.TODOITEM_DESCRIPTION_MIN_LENGTH} and no more than ${TodoItem.TODOITEM_DESCRIPTION_MAX_LENGTH}`), getEmptyDBResponse());
		return;
	}

	if (typeof (complete) != 'boolean') {
		cb(new Error(`complete must be a boolean (true/false)`), getEmptyDBResponse());
		return;
	}

	TodoItem.pool.query(UPDATE_TODOITEM_WHERE_ID_EQUALS(), [title, description, complete, id], (err, res) => {
		cb(err, res);
	});

};





module.exports.TodoItem = TodoItem;


