/*
 * appuser.js
 * Author: Sukhbir Singh
 * Description: This contains the postgresql table definition for the user table
 */



// The appuser table has the following defined columns
// id: int primary key that is autogenerated
// username: vary character field which must be unique, not null, and have a length
// of at least 6 characters and upto 20 characters (less than 21)
// datecreated: timestamp, auto generated to be the current timestamp in GMT


const lodash = require('lodash');

const AppUser = {};

// when AppUser is imported, set pool to a pg pool
AppUser.pool = null;

// Can be set to 
AppUser.STAGE = 'dev'


AppUser.DEV_STAGE = 'dev';
AppUser.QA_STAGE = 'qa';
AppUser.PROD_STAGE = 'prod';

AppUser.APPUSER_USERNAME_MIN_LENGTH = 6;

AppUser.APPUSER_USERNAME_MAX_LENGTH = 20;

// Set a minimum password length for unencrypted password
AppUser.MIN_PASSWORD_LENGTH = 8;

AppUser.MAX_PASSWORD_LENGTH = 128;

AppUser.APPUSER_TABLE_NAME = 'appuser';

const EXISTS_TABLE = function() {
	return `SELECT tablename FROM pg_tables WHERE tablename = '${AppUser.APPUSER_TABLE_NAME}';`;
};

const CREATE_TABLE_APPUSER = function() { 
	return `CREATE TABLE ${AppUser.APPUSER_TABLE_NAME} (
		id SERIAL PRIMARY KEY,

		username varchar(20) UNIQUE NOT NULL 
		CHECK(LENGTH(username) >= ${AppUser.APPUSER_USERNAME_MIN_LENGTH} AND LENGTH(username) <= ${AppUser.APPUSER_USERNAME_MAX_LENGTH}),

		password varchar(64) NOT NULL,
		datecreated timestamp DEFAULT current_timestamp
	);`;
};

const DROP_TABLE_APPUSER = function() { 
	return `DROP TABLE ${AppUser.APPUSER_TABLE_NAME};`
};


const INSERT_INTO_APPUSER = function() {
	return `INSERT INTO ${AppUser.APPUSER_TABLE_NAME} (username, password) VALUES ($1, $2);`;
};

const SELECT_ALL_FROM_APPUSER = function() {
	return `SELECT * FROM ${AppUser.APPUSER_TABLE_NAME};`;
};

const SELECT_COUNT_FROM_APPUSER = function() {
	return `SELECT count(*) FROM ${AppUser.APPUSER_TABLE_NAME};`;i
};

const SELECT_ALL_FROM_APPUSER_WHERE_ID_EQUALS = function() { 
	return `SELECT * FROM ${AppUser.APPUSER_TABLE_NAME} WHERE id = $1;`;
};

const SELECT_ALL_FROM_APPUSER_WHERE_USERNAME_EQUALS = function() {
	return `SELECT * FROM ${AppUser.APPUSER_TABLE_NAME} WHERE username = $1;`;
};

const SELECT_ALL_FROM_APPUSER_WHERE_USERNAME_CONTAINS = function () {
	return `SELECT * FROM ${AppUser.APPUSER_TABLE_NAME} WHERE username LIKE $1;`;
};

function getEmptyDBResponse() {
	return {
		rows: [],
		fields: [],
		command: '',
		rowCount: 0
	};
}

AppUser.setTableName = function(name) {
	AppUser.APPUSER_TABLE_NAME = name;
};

AppUser.existsTable= function(cb) {
	// This function is for testing purposes only.
	if (AppUser.pool == null) {
		cb(new Error('pg pool must not be null'), getEmptyDBResponse());
		return;
	}
	AppUser.pool.query(EXISTS_TABLE(), (err, res) => {
		let exists = res.rowCount > 0;
		cb(err, exists, res);
	});
}

AppUser.count = function(cb) {
	if (AppUser.pool == null) {
		cb(new Error('pg pool must not be null'), getEmptyDBResponse());
		return;
	}
	AppUser.pool.query(SELECT_COUNT_FROM_APPUSER(), (err, res) => {
		if (err) {
			cb(err, -1, null);
		}
		else {
			let count = res.rows[0].count;
			cb(err, count, res);
		}
	});	
};

AppUser.createTable = function(cb) {
	if (AppUser.pool == null) {
		cb(new Error('pg pool must not be null'), getEmptyDBResponse());
		return;
	}
	AppUser.pool.query(CREATE_TABLE_APPUSER(), (err, res) => {
		cb(err, res);
	});
};

AppUser.dropTable = function(cb) {
	if (AppUser.pool == null) {
		cb(new Error('pg pool must not be null'), getEmptyDBResponse());
		return;
	}
	AppUser.pool.query(DROP_TABLE_APPUSER(), (err, res) => {
		cb(err, res);
	});
};

AppUser.all = function(cb) {
	if (AppUser.pool == null) {
		cb(new Error('pg pool must not be null'), getEmptyDBResponse());
		return;
	}
	AppUser.pool.query(SELECT_ALL_FROM_APPUSER(), (err, res) => {
		cb(err, res);
	});
};

AppUser.getById = function(id, cb) {
	if (AppUser.pool == null) {
		cb(new Error('pg pool must not be null'), getEmptyDBResponse());
		return;
	}
	if (!lodash.isInteger(id) || id < 1) {
		cb(new Error('id must be an integer greater than 0'), getEmptyDBResponse());
		return;
	}
	AppUser.pool.query(SELECT_ALL_FROM_APPUSER_WHERE_ID_EQUALS(), [id], (err, res) => {
		cb(err, res);
	});
};

AppUser.getByUsername = function(username, cb) {
	if (AppUser.pool == null) {
		cb(new Error('pg pool must not be null'), getEmptyDBResponse());
		return;
	}
	if (typeof(username) != 'string' || username.length == 0) {
		cb(new Error('username must be a non-empty string'), getEmptyDBResponse());
		return;
	}
	AppUser.pool.query(SELECT_ALL_FROM_APPUSER_WHERE_USERNAME_EQUALS(), [username], (err, res) => {
		cb(err, res);
	});
};

AppUser.getByUsernameContains = function(username, cb) {
	if (AppUser.pool == null) {
		cb(new Error('pg pool must not be null'), getEmptyDBResponse());
		return;
	}
	if (typeof(username) != 'string' || username.length == 0) {
		cb(new Error('username must be a non-empty string'), getEmptyDBResponse());
		return;
	}
	AppUser.pool.query(SELECT_ALL_FROM_APPUSER_WHERE_USERNAME_CONTAINS(), [`%${username}%`], (err, res) => {
		cb(err, res);
	});
};

AppUser.add = function(username, password, cb) {
	if (AppUser.pool == null) {
		cb(new Error('pg pool must not be null'), getEmptyDBResponse());
		return;
	}
	if (typeof(username) != 'string' 
		|| username.length < AppUser.APPUSER_USRENAME_MIN_LENGTH
		|| username.length > AppUser.APPUSER_USRENAME_MAX_LENGTH) {	
		cb(new Error(`username must be a non-empty string with a length atleast ${AppUser.APPUSER_USERNAME_MIN_LENGTH} and no more than ${AppUser.APPUSER_USERNAME_MAX_LENGTH} inclusive`), getEmptyDBResponse());
		return;
	}
	else if (typeof(password) != 'string' || password.length == 0) {
		cb(new Error('password must be a non-empty string'), getEmptyDBResponse());
		return;
	}

	AppUser.getByUsername(username, (err, res) => {
		if (err) {
			cb(err, res);
		}
		else if (res.rowCount > 0) {
			let index = res.rows.findIndex((row)=>{
				return row.username == username; 	
			});
			if (index == -1) {
				AppUser.pool.query(INSERT_INTO_APPUSER(), [username, password], (err, res) => {
					cb(err, res);
				});
			}
			else {
				cb(new Error('username must be unique'), getEmptyDBResponse());
				return;
			}
		}
		else {
			AppUser.pool.query(INSERT_INTO_APPUSER(), [username, password], (err, res) => {
				cb(err, res);
			});
		}
	});
};

module.exports.AppUser = AppUser;


